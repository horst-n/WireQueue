<?php
/**
*  Module: Wire Queue Storage Redis
*  Author: netcarver
*
*  ProcessWire 2.3+
*  Copyright (C) 2010 by Ryan Cramer
*  Licensed under GNU/GPL v2, see LICENSE.TXT
*
*  http://www.processwire.com
*  http://www.ryancramer.com
*/

require_once(dirname(__FILE__) . '/WireQueueStorage.php');

class WireQueueRedis extends WireQueueStorage implements ConfigurableModule {

    protected $redis = null;
    protected $key   = null;

    public static function getModuleInfo() {
        self::$moduleInfo = array(
            'title'   => 'Wire Queue Redis',
            'version' => '0.1.0',
            'author'  => 'Netcarver',
            'summary' => 'Provide Storage in Redis. First In - First Out. (Uses one Redis list per queue.)',
            );
        return parent::getModuleInfo();
    }

    public function ___install() {
        if(!parent::___install()) {
            return false;
        }
        return true;
    }

    public function ___uninstall() {
        if(!parent::___uninstall()) {
            return false;
        }
        return true;
    }

    public function __construct() {
        $this->filebased = false;
        parent::__construct();
    }

    public function ready2use() {
        return class_exists('Redis');
    }

    public function hookAppendQueueStorageType(HookEvent $event) {
        if(!$this->ready2use()) return;
        self::getModuleInfo();
        $queueTypes = $event->return;
        $queueTypes[__CLASS__] = array_merge(self::$moduleInfo, array(
            'type'        => 'redis',
            'description' => $this->_('This module uses redis as Storage. The Redis list data structure will be used. Entries will be serialized before storing them.'),
        ));
        $event->return = $queueTypes;
        $event->replace = true;
    }



    public function createStorage() {
        if(!$this->ready2use()) return false;
        return true;
    }


    protected function _open() {

        // Setup queue key
        if (null === $this->key) {
            $id   = $this->pageID;
            $name = wire('pages')->get($id)->name;
            $this->key = "wirequeue-{$name}";
        }

        // Setup connection to redis
        if (null === $this->redis) {
            $this->redis = new \Redis();
            $ok = $this->redis->pconnect($this->redis_server_ip, (int) $this->redis_server_port);
            if (!$ok) {
                // Connection attempt failed!
                return false;
            }
        }

        return true;
    }


    /**
     * Empties the queue by deleting the key that stores it
     */
    public function purgeItems() {
        if(!$this->ready2use()) return false;
        if(!$this->_open()) return false;
        $this->redis->del($this->key);
        return true;
    }

    /**
     * Tests if the queue has anything in it
     */
    public function isEmpty() {
        return (0 == $this->itemCount());
    }


    public function addItem($arrayData) {
        if(!$this->_addItem()) return false;
        if(2 != $this->getState()) return false;
        if(!$this->_open()) return false;
        $r = $this->redis->rpush($this->key, serialize($arrayData));
        return $r; // Returns the number of entries in the queue
    }

    public function getItem($worker = null) {
        if(!$this->_getItem()) return false;
        if(2 != $this->getState()) return false;
        if(!$this->_open()) return false;
        $r = $this->redis->lpop($this->key);
        return unserialize($r);
    }

    public function itemCount() {
        if(2 > $this->getState()) return 0;
        if(!$this->_open()) return false;
        return $this->redis->llen($this->key);
    }


    public function getItems($count, $worker = null) {
        if(!$this->_getItem()) return false;
        if(2 != $this->getState()) return false;
        if(!$this->_open()) return false;

        $results = array();
        while ($count-- && ($this->redis->llen($this->key) > 0)) {
            $results[] = unserialize($this->redis->lpop($this->key));
        }
        return $results;
    }

    static public function getDefaultConfig() {
        return array(
            'redis_server_ip'   => '127.0.0.1',
            'redis_server_port' => '6379',
        );
    }


    /**
     * Setup the module's config page
     */
    static public function getModuleConfigInputfields(array $data) {

        $modules   = wire('modules');
        $config    = wire('config');
        $fields    = new InputfieldWrapper();
        $defaults  = self::getDefaultConfig();
        $data      = array_merge($defaults, $data);

        $new_ip       = $data['redis_server_ip'];
        $new_port     = $data['redis_server_port'];

        if (isset($_POST['redis_server_ip']) && $_POST['redis_server_ip'] != $data['redis_server_ip']) {
            $new_ip = $_POST['redis_server_ip'];
        }

        if (isset($_POST['redis_server_port']) && $_POST['redis_server_port'] != $data['redis_server_port']) {
            $new_port = $_POST['redis_server_port'];
        }

        $redis_ok = self::testConnection($new_ip, $new_port);

        $f = $modules->get('InputfieldText');
        $f->name  = 'redis_server_ip';
        $f->label = __('IP Address of the redis server running the queues');
        $f->value = $data['redis_server_ip'];
        $f->required = 1;
        $f->columnWidth = 50;
        $fields->add($f);

        $f = $modules->get('InputfieldText');
        $f->name  = 'redis_server_port';
        $f->label = __('Port of the redis server running the queues');
        $f->value = $data['redis_server_port'];
        $f->required = 1;
        $f->columnWidth = 50;
        $fields->add($f);

        $f = $modules->get("InputfieldMarkup");
        $f->label = __("Redis Session Storage Notes.");
        if ($redis_ok) {
            $status = __( "Access to a redis server using the above settings was successful.");
        } else {
            $status = __( "<strong>WARNING!: Access to a valid redis server is needed, please update the above settings.</strong>");
        }
        $f->value = "<p>$status</p>";

        $fields->add($f);

        return $fields;
    }


    static protected function testConnection($ip, $port) {
        if(!class_exists('Redis')) return false;
        $redis = new \Redis();
        $ok = $redis->pconnect($ip, (int) $port);
        return $ok;
    }

}
