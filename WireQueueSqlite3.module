<?php
/**
*  Module: Wire Queue Storage Sqlite3
*  Author: Horst Nogajski, http://nogajski.de/
*  Date:   07.02.2016
*
*  ProcessWire 2.3+
*  Copyright (C) 2010 by Ryan Cramer
*  Licensed under GNU/GPL v2, see LICENSE.TXT
*
*  http://www.processwire.com
*  http://www.ryancramer.com
*/

require_once(dirname(__FILE__) . '/WireQueueStorage.php');
require_once(dirname(__FILE__) . '/WireQueueLibHnSqlite3.php');

class WireQueueSqlite3 extends WireQueueStorage {

    public static function getModuleInfo() {
        self::$moduleInfo = array(
            'title'   => 'Wire Queue Sqlite3',
            'version' => '0.1.0',
            'author'  => 'Horst Nogajski',
            'summary' => 'Provide permanent Storage in Sqlite Database files. FiFo (First In - First Out)',
            );
        return parent::getModuleInfo();
    }

    public function __construct() {
        $this->filebased = true;
        self::$fileExtension = 'sqlite3';
        parent::__construct();
    }

    public function ___install() {
        if(!parent::___install()) {
            return false;
        }
        return true;
    }

    public function ___uninstall() {
        if(!parent::___uninstall()) {
            return false;
        }
        return true;
    }

    public function ready2use() {
        // do all checks to determine if this storage module is ready for use in this system,
        // return boolean true | false
        return class_exists('SQlite3') && class_exists('WireQueueLibHnSqlite3');
    }

    public function hookAppendQueueStorageType(HookEvent $event) {
        if(!$this->ready2use()) return;
        self::getModuleInfo();
        $queueTypes = $event->return;
        $queueTypes[__CLASS__] = array_merge(self::$moduleInfo, array(
            'type'        => 'sqlite3',
            'description' => $this->_('This module uses Sqlite3 Databasefiles as Storage.'),
        ));
        $event->return = $queueTypes;
        $event->replace = true;
    }


    protected function initSqliteDB() {
        $dbname = basename($this->getFilename());
        $dbpath = dirname($this->getFilename()) . '/';
        $this->sqlitedb = new WireQueueSqlite3DB($dbname, $dbpath);
    }


    public function createStorage() {
        if(!$this->ready2use()) return false;
        if(1 < $this->getState()) return false;
        $this->initSqliteDB();
        return $this->sqlitedb->makeNewDB();
    }


    public function addItem($arrayData) {
        if(!parent::_addItem()) return false;
        $data = serialize($arrayData);
        $this->initSqliteDB();
        return $this->sqlitedb->insertRow($data);
    }


    public function getItem($worker = null) {
        if(!parent::_getItem()) return false;
        $worker = null === $worker ? 1 : intval($worker);
        $this->initSqliteDB();
        $data = $this->sqlitedb->getPendingRecord($worker);
        if(is_array($data) && isset($data['data'])) $data['data'] = unserialize($data['data']);
        return $data;
    }


    public function itemCount() {
        if(!parent::_itemCount()) return false;
        if(2 > $this->getState()) return 0;
        // returns the num count of records currently in the queue
        $this->initSqliteDB();
        $res = $this->sqlitedb->getCountRecipients();
        return $res;
    }


    // this is for keeping track of optional further processing steps
    public function updateItemState($id, $state, $worker = null) {
        if(!parent::_getItem()) return false;
        $this->initSqliteDB();
        return $this->sqlitedb->updateRowByID($id, $state, $worker, null);
    }

    // this is for keeping track of optional further processing steps
    public function getItem4FurtherProcessing($state, $worker = null) {
        if(!parent::_getItem()) return false;
        $worker = null === $worker ? 1 : intval($worker);
        $this->initSqliteDB();
        $data = $this->sqlitedb->getRecordWithState($state, $worker);
        if(is_array($data) && isset($data['data'])) $data['data'] = unserialize($data['data']);
        return $data;
    }


    // this is for keeping track and or modify data with further processing steps
    public function updateItem($id, $state, $worker = null, $data = null) {
        if(!parent::_getItem()) return false;
        $this->initSqliteDB();
        if(null != $data) $data = serialize($data);
        return $this->sqlitedb->updateRowByID($id, $state, $worker, $data);
    }

}











class WireQueueSqlite3DB {

    private $dbname = '';
    private $dbpath = '';
    private $DB_FILE = null;
    private $TBL_NAME = 'tbl_wirequeue';

    // $FIELD_DEFINITIONS
    private $FIELD_DEFINITIONS = 'id integer primary key, data text, state integer, worker integer, created DATETIME DEFAULT CURRENT_TIMESTAMP, modified DATETIME';

    private $DB_IS_OPEN = false;
    private $db = null;


    public function __construct($dbname, $dbpath) {
        $this->dbname = $dbname;
        $this->dbpath = $dbpath;
        $this->DB_FILE = $this->dbpath . $this->dbname;
        $this->db = new WireQueueLibHnSqlite3();
    }


    public function __destruct() {
        if($this->DB_IS_OPEN) $this->db->close();
        unset($this->db);
    }


    public function dbfile() {
        return $this->DB_FILE;
    }


    public function makeNewDB() {
        if(file_exists($this->DB_FILE)) {
            // gute Frage, was nun?
            return false;
        }
        if(is_dir(dirname($this->DB_FILE))) {
            wireChmod(dirname($this->DB_FILE));
        } else {
            wireMkdir(dirname($this->DB_FILE));
            wireChmod(dirname($this->DB_FILE));
        }
        $res = $this->db->open($this->DB_FILE, 3);
        if($res) {
            $this->DB_IS_OPEN = true;
            $sql = "CREATE TABLE $this->TBL_NAME ($this->FIELD_DEFINITIONS)";
            $res = $this->db->exec($sql);
            if($res !== false) {
                $sql = "CREATE TRIGGER {$this->TBL_NAME}_trig AFTER UPDATE ON {$this->TBL_NAME}
 BEGIN
  update {$this->TBL_NAME} SET modified = datetime('now') WHERE id = NEW.id;
 END;";
                $res = $this->db->exec($sql);
                return false !== $res ? true : false;
            }
        }
        return false;
    }


    public function open($access_mode = 0) {
        $access_mode = in_array($access_mode, array(0, 1, 2, 3)) ? $access_mode : 0;
        if($this->db->open($this->DB_FILE, $access_mode)) {
            $this->DB_IS_OPEN = true;
        }
        return $this->DB_IS_OPEN;
    }


    public function close() {
        if($this->DB_IS_OPEN) {
            $this->db->close();
            $this->DB_IS_OPEN = false;
        }
        unset($this->db);
    }


    public function insertRow($data) {
        $doClose = !$this->DB_IS_OPEN;
        if(!$this->DB_IS_OPEN) {
            if(!$this->open(SQLITE3_OPEN_READWRITE)) return false;
        }
        $data = SQLite3::escapeString($data);
        $sql = "INSERT INTO " . $this->TBL_NAME . " (data, state) VALUES ('$data', 0)";
        $res = $this->db->exec($sql);
        if($doClose) $this->db->close();
        return $res === false ? false : true;
    }


    public function updateRowByID($id, $state, $worker = 1, $data = null) {
        $doClose = !$this->DB_IS_OPEN;
        if(!$this->DB_IS_OPEN) {
            if(!$this->open(SQLITE3_OPEN_READWRITE)) return false;
        }
        $id = (int)$id;
        $state = (int)$state;
        $worker = (int)$worker;
        if(is_string($data)) {
            $data = SQLite3::escapeString($data);
            $sql = "UPDATE " . $this->TBL_NAME . " SET data='$data', state=$state, worker=$worker WHERE id=$id";
        } else {
            $sql = "UPDATE " . $this->TBL_NAME . " SET state=$state, worker=$worker WHERE id=$id";
        }
        $res = $this->db->exec($sql);
        if($doClose) $this->db->close();
        return $res === false ? false : true;
    }


    public function getPendingRecord($worker = 1) {
        $doClose = !$this->DB_IS_OPEN;
        if(!$this->DB_IS_OPEN) {
            if(!$this->open(SQLITE3_OPEN_READWRITE)) return false;
        }
        $sql = "SELECT id,data FROM {$this->TBL_NAME} WHERE state=0 LIMIT 1";
        $this->db->query($sql, SQLITE3_NUM);
        $worker = (int)$worker;
        if(intval($this->db->numrows) == 1) {
            $record = $this->db->records[0];
            $res = $this->updateRowByID($record[0], 1, $worker);
            if($doClose) $this->db->close();
            $data = array('id' => $record[0], 'data' => $record[1]);
            return $res ? $data : false;
        }
        if($doClose) $this->db->close();
        return null;
    }


    public function getRecordWithState($state, $worker = 1) {
        $doClose = !$this->DB_IS_OPEN;
        if(!$this->DB_IS_OPEN) {
            if(!$this->open(SQLITE3_OPEN_READWRITE)) return false;
        }
        $state = (int)$state;
        $worker = (int)$worker;
        $sql = "SELECT id,data FROM {$this->TBL_NAME} WHERE state=$state LIMIT 1";
        $this->db->query($sql, SQLITE3_NUM);
        if(intval($this->db->numrows) == 1) {
            $record = $this->db->records[0];
            $res = $this->updateRowByID($record[0], $state, $worker);
            if($doClose) $this->db->close();
            $data = array('id' => $record[0], 'data' => $record[1]);
            return $res ? $data : false;
        }
        if($doClose) $this->db->close();
        return null;
    }


    public function getCountRecipients($onlyPending = true) {
        $doClose = !$this->DB_IS_OPEN;
        if(!$this->DB_IS_OPEN) {
            if(!$this->open(SQLITE3_OPEN_READONLY)) return false;
        }
        $sql = true === $onlyPending ?
            "SELECT id FROM {$this->TBL_NAME} WHERE state=0" :
            "SELECT id FROM {$this->TBL_NAME}";
        $num = true === $this->db->query($sql, SQLITE3_NUM) ? $this->db->numrows : 0;
        if($doClose) $this->db->close();
        return $num;
    }

}
